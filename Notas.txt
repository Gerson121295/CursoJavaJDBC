

comandos:
Ctrl + 3 - escribir ggas  // Genera los Getters and Setters
Ctrl + 1 para crear la clase y metodos previamente antes definidos.

---- Proyecto Control de Stock --
Configuracion de proyecto usando Eclipse

Clic en File --> New --> Maven project --> seleccionar Create a simple project
y ver que tenga seleccionado Use default workspace location o elegir ubicacion donde
se guardará el proyecto. luego --> clic en next ->
Agregar lo siguiente en:  Group Id: com.alura   Artifact Id: control-de-stock
Luego clic en finish.

--Clic derecho sobre el proyecto --> Properties --> Java Build Path --> clic
en --> libraries --> Si esta en JRE System library 1.5  --> clic derecho en Edit
--> Clic en Workspace default JRE(jdk-17.0.4.1) para seleccionarlo --> clic en 
finish --> Clic en Apply and Close.


Abrir el pom.xml: escribir el nombre del proyecto y descripcion.
En el pom va a ir todas las data, configuraciones, dependencias o librerias a 
utilizar en el proyecto.

"jdbc:mysql://localhost/control_de_stock?useTimeZone=true&serverTimeZone=UTC",

"root", "admin"


Para acceder a una base de datos necesitamos del driver de conexión;
Un driver es simplemente una librería .jar.
JDBC significa Java DataBase Connectivity;
El JDBC define una capa de abstracción entre la aplicación y el driver de la base de datos.
Esta capa es compuesta de interfaces que el driver implementa.

Para abrir una conexión con la base de datos debemos utilizar el método 
getConnection de la clase DriverManager;

El método getConnection recibe tres parámetros. Son ellos la URL de conexión 
JDBC, el usuario y la contraseña.



--- Importar un proyecto en Eclipse
- Tener el proyecto descomprimido.
- Clic en File --> Import --> Existing Maven Projects -> Elegir el proyecto en Browse -->
-- Seleccionarlo --> Clic en Finish.

---Archivos a enviar en un project son: src, .gitignore, pom.xml.

"SELECT id, nombre, descripcion, cantidad FROM producto"


¿Para qué sirve el retorno del método execute de la interfaz java.sql.Statement?

El método devuelve true cuando el resultado devuelve un java.sql.ResultSet 
(resultado de un SELECT) y false cuando el resultado no devuelve contenido 
(resultado de un DELETE, UPDATE o DELETE).

Para simplificar y encapsular la creación de la conexión debemos utilizar una 
clase ConnectionFactory;

Esta clase sigue el estándar de creación Factory Method, que encapsula la 
creación de un objeto.
Podemos utilizar la interfaz java.sql.Statement para ejecutar un comando 
SQL en la aplicación;

El método execute envía el comando para la base de datos.



- ¿Cuál es el riesgo de utilizar un Statement en lugar del PreparedStatement?
El Statement no mantiene una versión de la query compilada en la base de datos.
El PreparedStatement mantiene la query compilada en la base de datos, de forma 
parametrizada. Así el usuario puede ejecutar la misma consulta diversas veces 
con parámetros distintos.

Ya vimos cómo dejar nuestra aplicación más segura y legible utilizando el 
PreparedStatement. Con eso eliminamos la vulnerabilidad de sufrir ataques de 
SQL Injection.



-- ¿Cuál es el estándar de JDBC (del driver) para manejar transacciones de base de datos?
Auto-Commit.
Este es el estándar, que puede ser modificado por el método setAutoCommit, de la interfaz Connection

--¿Por qué cuando utilizamos el try-with-resources no hay más la necesidad de explicitar 
el comando close para cerrar los recursos (PreparedStatement, Connection, PreparedStatement)?
Por el hecho de que estos recursos extienden la interfaz AutoCloseable.
Como estas interfaces extienden la interfaz AutoCloseable, el try-with-resources ejecuta 
el comando close implícitamente.


Cuando ejecutamos una query SQL como Statement tenemos un riesgo de seguridad 
llamado SQL Injection;
SQL Injection es el hecho de enviar comandos SQL como parámetro de las solicitudes 
en una aplicación.
Para evitar el fallo por SQL Injection debemos utilizar la interfaz PreparedStatement;

Diferente del Statement, el PreparedStatement trata los parámetros del comando SQL 
para que caracteres y comandos especiales sean tratados como strings.

Las bases de datos ofrecen un recurso llamado transacción, que junta muchas operaciones 
SQL como un conjunto de ejecución;

Si el conjunto falla no es aplicada ninguna modificación y ocurre el rollback de la transacción.
Todos los comandos del conjunto necesitan funcionar para que la transacción sea finalizada 
con un commit.

Para garantizar el cierre de los recursos abiertos en el código, Java provee un recurso 
llamado try-with-resources para ayudarnos;

Para utilizar este recurso es necesario que la clase utilizada (como la Connection) 
implemente la interfaz Autocloseable.



- #4
En un escenario donde múltiples clientes pueden acceder a una misma aplicación simultáneamente. 
¿Cuál sería el mejor abordaje?

Reutilizar un conjunto de conexiones de tamaño fijo o dinámico.
 Esta es la estratégia de mantener un pool de conexiones. 
Vamos a abrir una cantidad específica de conexiones y reutilizarlas.


-- Podemos der la tabla de conexion abiertas de los usuarios en MySQL.
-Por consola CMD - Entramos a archivos de programa --> MySQL -> cd Bin --> nos logueamos en 
MySQL --> ya dentro ejecutamos: show processlist     //mysql> show processlist


-- En un pool de conexiones con 9 conexiones disponibles. Si todas las 9 conexiones 
están ocupadas y entra una décima requisición, ¿el usuario logra conectarse?

El décimo usuario va a esperar que una de las 9 conexiones se libere.
En el momento que una conexión quede disponible, el décimo cliente va a tener su 
requisición procesada.

Lo que aprendimos:
Utilizar el pool de conexiones es una buena práctica;
El pool de conexiones controla la cantidad de conexiones abiertas entre la aplicación y la BD;
Es normal que haya un mínimo y un máximo de conexiones.
De la misma forma que hay, en JDBC, una interfaz para representar la conexión (java.sql.Connection), 
también hay una interfaz que representa el pool de conexiones (javax.sql.DataSource);
C3P0 es una implementación Java de un pool de conexiones.

# - 5 Capa de Persistencia con DAO

Nos hubicamos en ProductoController en el metodo guardar, seleccionamos el metodo guardar y clic
derecho -> clic en Open Call Hierarchy -> abre una nueva ventana. -> esto para saber quienes estan
llamando este metodo.

El Patrón de diseño DAO. La finalidad de este patrón de diseño es tener un objeto que 
tiene como responsabilidad acceder a la base de datos y realizar las operaciones necesarias 
sobre la entidad.

-- ¿Cuáles son las ventajas de utilizar clases con el estándar DAO?
Tiene que ver con la capacidad de aislar en un lugar centralizado, toda la lógica de acceso 
al repositorio de datos de la entidad.
Así estaremos evitando duplicación de código y centralización de la lógica.

-- Patron MVC - Model Vista Controlador

Modelo  <--> DAO <--> Controller --> View

----   El Estandar MVC : Model Vista Controlador --- 
La vista debe mostrar la información devuelta por la base de datos y el DAO debe representar el 
modelo y realizar las operaciones que conecten la aplicación a la base de datos.

Clase ProductController: La capa de productoController tiene su importancia en este caso porque 
ella, más allá de realizar esta conexión entre la vista y el modelo, ella también realiza las 
operaciones relacionadas a las reglas de negocio para completar una requisición. 

Entonces si nosotros tenemos aquí la entidad de producto y queremos relacionarla a una otra entidad, 
nosotros podremos hacer la operación directamente aquí en productoController y no impactaría 
la finalidad de ninguna de las otras dos capas.

Por más sencilla que sea la clase de productoController, su presencia tiene gran importancia 
justamente porque si el proyecto evoluciona, es en ella que empezaremos a agregar más lógicas 
de negocio. 


** Lo que aprendimos en esta aula:

- Para cada tabla del modelo tenemos una clase de dominio;
- Para la tabla de producto tenemos una clase Producto asociada.
- Los objetos del tipo Producto representan un registro de la tabla.
- Para acceder a la tabla vamos a utilizar el estándar llamado Data Access Object (DAO);
- Para cada clase de dominio hay un DAO asociado. Por ejemplo, la clase Producto posee 
  la clase ProductoDAO.
- Todos los métodos JDBC relacionados al producto deben estar encapsulados en ProductoDAO.
- Una aplicación es escrita en capas;
- Las capas más conocidas son las de view, controller, modelo y persistencia, que componen 
  el estándar MVC.
- El flujo de una requisición entre las capas es el siguiente;
	view <--> controller <--> persistencia

- En este curso utilizamos una aplicación con las views y los controllers ya creados y enfocamos 
  en la capa de persistencia y modelo;
- No es una buena práctica dejar los detalles de implementación de una capa en otras que no 
  tienen esta responsabilidad (por ejemplo la capa de controller lanzar una SQLException);
- Aquí estamos aprendiendo con una aplicación desktop embebida, pero hay otros tipos de aplicaciones 
  con otros tipos de view, como html para aplicaciones web.


***** 6 - Evitando queries N + 1
Un control o comando 1 para crear la clase o metodos ya definidos.
Acá hice un clic y se abrió el reporte y tenemos acá un SELECT ID, NOMBRE FROM CATEGORÍA. Una vez en 
la categoría, y una, dos, tres, cuatro selects a la tabla de producto. ¿Por qué? Como tenemos cuatro 
categorías acá en el reporte, nosotros fuimos cuatro veces a la base de datos para buscar a sus productos.

[12:03] Entonces acá nosotros estuvimos ejecutando cinco veces. O sea, tuvimos cinco conexiones a la 
base de datos para poder imprimir este reporte. Entonces para hacer una búsqueda entre dos tablas que 
son producto y categoría, estuvimos yendo varias veces a la base de datos, ahora en nuestro caso fueron 
pocas veces.

 Esta solución que desarrollamos no está siguiendo las buenas prácticas de programación porque resolvimos 
un problema, pero creamos otros. Esta situación es conocida como queries N + 1, que es cuando para 
ejecutar una cierta funcionalidad, estamos yendo a la base de datos más de lo que es necesario cuando 
hay la posibilidad de ir una sola vez.



- ¿Cuál es el problema de la aplicación tener queries N + 1?

Porque son utilizadas múltiples queries, aumentando la cantidad de acceso a la base de datos y, 
por consecuencia, empeorando la performance de la aplicación y del propio sistema de base de datos.
Cuando las consultas son sencillas no hay problemas. Pero cuanto más complejidad van teniendo nuestras 
consultas hay la necesidad de buscar más informaciones de múltiples tablas, aumentando el acceso 
exponencialmente. Eso impacta gravemente la performance de la aplicación y del sistema de base de datos.







// Clase ProductoController
public int modificar(String nombre, String descripcion, Integer cantidad, Integer id) throws SQLException {
    ConnectionFactory factory = new ConnectionFactory();
    Connection con = factory.recuperaConexion();
    Statement statement = con.createStatement();
    statement.execute("UPDATE PRODUCTO SET "
            + " NOMBRE = '" + nombre + "'"
            + ", DESCRIPCION = '" + descripcion + "'"
            + ", CANTIDAD = " + cantidad
            + " WHERE ID = " + id);

    int updateCount = statement.getUpdateCount();

    con.close();   

    return updateCount;
}
// Clase ControlDeStockFrame
private void modificar() {
    if (tieneFilaElegida()) {
        JOptionPane.showMessageDialog(this, "Por favor, elije un item");
        return;
    }

    Optional.ofNullable(modelo.getValueAt(tabla.getSelectedRow(), tabla.getSelectedColumn()))
            .ifPresentOrElse(fila -> {
                Integer id = Integer.valueOf(modelo.getValueAt(tabla.getSelectedRow(), 0).toString());
                String nombre = (String) modelo.getValueAt(tabla.getSelectedRow(), 1);
                String descripcion = (String) modelo.getValueAt(tabla.getSelectedRow(), 2);
                Integer cantidad = Integer.valueOf(modelo.getValueAt(tabla.getSelectedRow(), 3).toString());

                int filasModificadas;

                try {
                    filasModificadas = this.productoController.modificar(nombre, descripcion, cantidad, id);
                } catch (SQLException e) {
                    e.printStackTrace();
                    throw new RuntimeException(e);
                }

                JOptionPane.showMessageDialog(this, String.format("%d item modificado con éxito!", filasModificadas));
            }, () -> JOptionPane.showMessageDialog(this, "Por favor, elije un item"));
}



-- Ya vimos cómo dejar nuestra aplicación más segura y legible utilizando el 
PreparedStatement. Con eso eliminamos la vulnerabilidad de sufrir ataques de SQL 
Injection.

public int modificar(String nombre, String descripcion, Integer cantidad, Integer id) throws SQLException {
    ConnectionFactory factory = new ConnectionFactory();
    Connection con = factory.recuperaConexion();

    PreparedStatement statement = con
            .prepareStatement("UPDATE PRODUCTO SET "
                    + " NOMBRE = ?, "
                    + " DESCRIPCION = ?,"
                    + " CANTIDAD = ?"
                    + " WHERE ID = ?");

    statement.setString(1, nombre);
    statement.setString(2, descripcion);
    statement.setInt(3, cantidad);
    statement.setInt(4, id);
    statement.execute();

    int updateCount = statement.getUpdateCount();

    con.close();

    return updateCount;
}

public int eliminar(Integer id) throws SQLException {
    ConnectionFactory factory = new ConnectionFactory();
    Connection con = factory.recuperaConexion();

    PreparedStatement statement = con
            .prepareStatement("DELETE FROM PRODUCTO WHERE ID = ?"); 
    statement.setInt(1, id);
    statement.execute();

    int updateCount = statement.getUpdateCount();

    con.close();

    return updateCount;
}

public List<Map<String, String>> listar() throws SQLException {
    ConnectionFactory factory = new ConnectionFactory();
    Connection con = factory.recuperaConexion();

    PreparedStatement statement = con
            .prepareStatement("SELECT ID, NOMBRE, DESCRIPCION, CANTIDAD FROM PRODUCTO");
    statement.execute();

    ResultSet resultSet = statement.getResultSet();

    List<Map<String, String>> resultado = new ArrayList<>();

    while (resultSet.next()) {
        Map<String, String> fila = new HashMap<>();
        fila.put("ID", String.valueOf(resultSet.getInt("ID")));
        fila.put("NOMBRE", resultSet.getString("NOMBRE"));
        fila.put("DESCRIPCION", resultSet.getString("DESCRIPCION"));
        fila.put("CANTIDAD", String.valueOf(resultSet.getInt("CANTIDAD")));

        resultado.add(fila);
    }

    con.close();

    return resultado;
}



************   #5 - Desafío: Operaciones de modificación y exclusión en el ProductoDAO   ******************

// ControlDeStockFrame
private void modificar() {
    if (tieneFilaElegida()) {
        JOptionPane.showMessageDialog(this, "Por favor, elije un item");
        return;
    }

    Optional.ofNullable(modelo.getValueAt(tabla.getSelectedRow(), tabla.getSelectedColumn()))
            .ifPresentOrElse(fila -> {
                Integer id = Integer.valueOf(modelo.getValueAt(tabla.getSelectedRow(), 0).toString());
                String nombre = (String) modelo.getValueAt(tabla.getSelectedRow(), 1);
                String descripcion = (String) modelo.getValueAt(tabla.getSelectedRow(), 2);
                Integer cantidad = Integer.valueOf(modelo.getValueAt(tabla.getSelectedRow(), 3).toString());
                var filasModificadas = this.productoController.modificar(nombre, descripcion, cantidad, id);

                JOptionPane.showMessageDialog(this, String.format("%d item modificado con éxito!", filasModificadas));
            }, () -> JOptionPane.showMessageDialog(this, "Por favor, elije un item"));
}

private void eliminar() {
    if (tieneFilaElegida()) {
        JOptionPane.showMessageDialog(this, "Por favor, elije un item");
        return;
    }

    Optional.ofNullable(modelo.getValueAt(tabla.getSelectedRow(), tabla.getSelectedColumn()))
            .ifPresentOrElse(fila -> {
                Integer id = Integer.valueOf(modelo.getValueAt(tabla.getSelectedRow(), 0).toString());
                var filasModificadas = this.productoController.eliminar(id);

                modelo.removeRow(tabla.getSelectedRow());
                JOptionPane.showMessageDialog(this,
                        String.format("%d item eliminado con éxito!", filasModificadas));
            }, () -> JOptionPane.showMessageDialog(this, "Por favor, elije un item"));
}

// ProductoController
public int modificar(String nombre, String descripcion, Integer cantidad, Integer id) {
    return productoDao.modificar(nombre, descripcion, cantidad, id);
}

public int eliminar(Integer id) {
    return productoDao.eliminar(id);
}



// ProductoDAO
public int eliminar(Integer id) {
    try {
        final PreparedStatement statement = con.prepareStatement("DELETE FROM PRODUCTO WHERE ID = ?");

        try (statement) {
            statement.setInt(1, id);
            statement.execute();

            int updateCount = statement.getUpdateCount();

            return updateCount;
        }
    } catch (SQLException e) {
        throw new RuntimeException(e);
    }
}


public int modificar(String nombre, String descripcion, Integer cantidad, Integer id) {
    try {
        final PreparedStatement statement = con.prepareStatement(
                "UPDATE PRODUCTO SET "
                + " NOMBRE = ?, "
                + " DESCRIPCION = ?,"
                + " CANTIDAD = ?"
                + " WHERE ID = ?");

        try (statement) {
            statement.setString(1, nombre);
            statement.setString(2, descripcion);
            statement.setInt(3, cantidad);
            statement.setInt(4, id);
            statement.execute();

            int updateCount = statement.getUpdateCount();

            return updateCount;
        }
    } catch (SQLException e) {
        throw new RuntimeException(e);
    }
}
















